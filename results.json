{"mean_fit_time": "[  4.67265506   4.88040204   9.22451348  10.16307106   6.60582933\n  14.89637828   2.67687917   3.11592712   3.09366522   3.39730134\n   3.38941178   3.86967974  12.31379423  12.32473269  96.6711144\n  98.4842742   95.32065024  96.128826    96.80292182  94.73958464\n  76.42440214  78.29309745  80.03307838 170.24627686 137.85440555\n 898.08449278]", "std_fit_time": "[  1.16984843   0.83215258   1.70218307   1.74489087   1.41112618\n   1.86403495   0.48645364   0.51152009   0.34987564   0.68583977\n   0.59618953   0.87627119   0.70635727   0.87331124   2.51768325\n   1.45508573   4.41206356   1.07713104   2.28879264   1.79479482\n   1.17233131   1.58651017   2.18191551  10.66486252   1.96704672\n 150.48526649]", "mean_score_time": "[ 0.13848376  0.09724727  0.04759312  0.06171679  0.05792894  0.09090328\n  0.06516676  0.0672318   0.06629052  0.06832948  0.07866421  0.09088254\n  0.57161589  0.6824532   0.15818386  0.15540357  0.15712271  0.17002826\n  0.15697093  0.21625628  0.14072671  0.17365708  0.13672166 19.7350831\n 16.10249677  2.95262561]", "std_score_time": "[5.55500142e-02 1.79148024e-02 9.66605436e-03 6.69190225e-03\n 8.03481332e-03 2.08489731e-02 9.94491628e-03 3.92919535e-03\n 8.21978287e-03 1.08076856e-02 2.08251775e-02 9.29559952e-03\n 2.63811690e-02 6.68130823e-02 1.39295406e-02 1.57303116e-02\n 1.24878265e-02 1.46021869e-02 1.56514953e-02 8.31235099e-02\n 1.14261264e-02 5.48404352e-02 1.54626008e-02 3.99606468e+00\n 8.52167416e-01 1.98192064e-01]", "param_estimator": "[LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)\n Perceptron(random_state=1) Perceptron(random_state=1)\n Perceptron(random_state=1) Perceptron(random_state=1)\n Perceptron(random_state=1) Perceptron(random_state=1)\n RandomForestClassifier(random_state=1)\n RandomForestClassifier(random_state=1) MLPClassifier(random_state=1)\n MLPClassifier(random_state=1) MLPClassifier(random_state=1)\n MLPClassifier(random_state=1) MLPClassifier(random_state=1)\n MLPClassifier(random_state=1) MLPClassifier(random_state=1)\n MLPClassifier(random_state=1) MLPClassifier(random_state=1) SVC() SVC()\n SVC()]", "param_estimator__C": "[0.0001 0.0001 1.0 1.0 10000.0 10000.0 -- -- -- -- -- -- -- -- -- -- -- --\n -- -- -- -- -- 0.0001 1.0 10000.0]", "param_estimator__penalty": "['l1' 'l1' 'l1' 'l1' 'l1' 'l1' -- -- -- -- -- -- -- -- -- -- -- -- -- --\n -- -- -- -- -- --]", "param_estimator__solver": "['saga' 'saga' 'saga' 'saga' 'saga' 'saga' -- -- -- -- -- -- -- -- 'lbfgs'\n 'lbfgs' 'lbfgs' 'lbfgs' 'lbfgs' 'lbfgs' 'lbfgs' 'lbfgs' 'lbfgs' -- -- --]", "param_estimator__tol": "[0.001 0.0001 0.001 0.0001 0.001 0.0001 0.001 0.0001 0.001 0.0001 0.001\n 0.0001 -- -- -- -- -- -- -- -- -- -- -- -- -- --]", "param_estimator__alpha": "[-- -- -- -- -- -- 1.0 1.0 0.001 0.001 0.0001 0.0001 -- -- 1.0 0.001\n 0.0001 1.0 0.001 0.0001 1.0 0.001 0.0001 -- -- --]", "param_estimator__max_iter": "[-- -- -- -- -- -- 2000 2000 2000 2000 2000 2000 -- -- -- -- -- -- -- --\n -- -- -- -- -- --]", "param_estimator__shuffle": "[-- -- -- -- -- -- True True True True True True -- -- -- -- -- -- -- --\n -- -- -- -- -- --]", "param_estimator__bootstrap": "[-- -- -- -- -- -- -- -- -- -- -- -- 'True' 'True' -- -- -- -- -- -- -- --\n -- -- -- --]", "param_estimator__criterion": "[-- -- -- -- -- -- -- -- -- -- -- -- 'gini' 'entropy' -- -- -- -- -- -- --\n -- -- -- -- --]", "param_estimator__max_features": "[-- -- -- -- -- -- -- -- -- -- -- -- 'sqrt' 'sqrt' -- -- -- -- -- -- -- --\n -- -- -- --]", "param_estimator__activation": "[-- -- -- -- -- -- -- -- -- -- -- -- -- -- 'logistic' 'logistic'\n 'logistic' 'tanh' 'tanh' 'tanh' 'relu' 'relu' 'relu' -- -- --]", "param_estimator__max_fun": "[-- -- -- -- -- -- -- -- -- -- -- -- -- -- 20000 20000 20000 20000 20000\n 20000 20000 20000 20000 -- -- --]", "param_estimator__gamma": "[-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 'scale' 'scale' 'scale']", "param_estimator__kernel": "[-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 'rbf' 'rbf' 'rbf']", "params": [{"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 0.0001, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.001}, {"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 0.0001, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.0001}, {"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 1.0, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.001}, {"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 1.0, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.0001}, {"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 10000.0, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.001}, {"estimator": "LogisticRegression(C=10000.0, max_iter=500, penalty='l1', solver='saga',\n                   tol=0.001)", "estimator__C": 10000.0, "estimator__penalty": "l1", "estimator__solver": "saga", "estimator__tol": 0.0001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 1.0, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 1.0, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.0001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 0.001, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 0.001, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.0001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 0.0001, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.001}, {"estimator": "Perceptron(random_state=1)", "estimator__alpha": 0.0001, "estimator__max_iter": 2000, "estimator__shuffle": true, "estimator__tol": 0.0001}, {"estimator": "RandomForestClassifier(random_state=1)", "estimator__bootstrap": "True", "estimator__criterion": "gini", "estimator__max_features": "sqrt"}, {"estimator": "RandomForestClassifier(random_state=1)", "estimator__bootstrap": "True", "estimator__criterion": "entropy", "estimator__max_features": "sqrt"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "logistic", "estimator__alpha": 1.0, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "logistic", "estimator__alpha": 0.001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "logistic", "estimator__alpha": 0.0001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "tanh", "estimator__alpha": 1.0, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "tanh", "estimator__alpha": 0.001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "tanh", "estimator__alpha": 0.0001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "relu", "estimator__alpha": 1.0, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "relu", "estimator__alpha": 0.001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "MLPClassifier(random_state=1)", "estimator__activation": "relu", "estimator__alpha": 0.0001, "estimator__max_fun": 20000, "estimator__solver": "lbfgs"}, {"estimator": "SVC()", "estimator__C": 0.0001, "estimator__gamma": "scale", "estimator__kernel": "rbf"}, {"estimator": "SVC()", "estimator__C": 1.0, "estimator__gamma": "scale", "estimator__kernel": "rbf"}, {"estimator": "SVC()", "estimator__C": 10000.0, "estimator__gamma": "scale", "estimator__kernel": "rbf"}], "split0_test_score": "[0.75217185 0.75217185 0.84978676 0.84978676 0.84978676 0.84978676\n 0.78344653 0.78344653 0.78344653 0.78344653 0.78344653 0.78344653\n 0.848997   0.84978676 0.83841415 0.83035855 0.83272785 0.82877902\n 0.82261886 0.82404044 0.83114832 0.83209604 0.83067446 0.75217185\n 0.84757542 0.8140894 ]", "split1_test_score": "[0.75217185 0.75217185 0.84425841 0.84425841 0.84425841 0.84425841\n 0.77997157 0.77997157 0.77997157 0.77997157 0.77997157 0.77997157\n 0.84046754 0.83967778 0.84125731 0.82182909 0.82719949 0.82498815\n 0.81614279 0.81788027 0.83051651 0.82956879 0.82593587 0.75217185\n 0.84536408 0.82024957]", "split2_test_score": "[0.75217185 0.75217185 0.85026062 0.85026062 0.85026062 0.85026062\n 0.76923077 0.76923077 0.76923077 0.76923077 0.76923077 0.76923077\n 0.84252093 0.84236298 0.84157321 0.83099036 0.82909493 0.82941084\n 0.83004265 0.8275154  0.83272785 0.83525509 0.83335966 0.75217185\n 0.84710156 0.81772232]", "split3_test_score": "[0.75217185 0.75217185 0.848997   0.848997   0.848997   0.84883905\n 0.81472121 0.81472121 0.81472121 0.81472121 0.81472121 0.81472121\n 0.84410046 0.84489022 0.84046754 0.83051651 0.83320171 0.82719949\n 0.82277681 0.82151319 0.83209604 0.82814721 0.83335966 0.75217185\n 0.85089243 0.8248302 ]", "split4_test_score": "[0.7520139  0.7520139  0.84915495 0.84915495 0.8493129  0.84915495\n 0.76622966 0.76622966 0.76622966 0.76622966 0.76622966 0.76622966\n 0.83399147 0.83272785 0.83462328 0.82356658 0.82009161 0.81993366\n 0.81535302 0.81487917 0.82640973 0.82056547 0.82056547 0.7520139\n 0.84883905 0.81235192]", "mean_test_score": "[0.75214026 0.75214026 0.84849155 0.84849155 0.84852314 0.84845996\n 0.78271995 0.78271995 0.78271995 0.78271995 0.78271995 0.78271995\n 0.84201548 0.84188912 0.8392671  0.82745222 0.82846312 0.82606223\n 0.82138683 0.82116569 0.83057969 0.82912652 0.82877902 0.75214026\n 0.84795451 0.81784868]", "std_test_score": "[6.31811720e-05 6.31811720e-05 2.16435863e-03 2.16435863e-03\n 2.17493786e-03 2.15789371e-03 1.72397790e-02 1.72397790e-02\n 1.72397790e-02 1.72397790e-02 1.72397790e-02 1.72397790e-02\n 4.90153164e-03 5.66432509e-03 2.56954028e-03 3.92613924e-03\n 4.74805562e-03 3.42346351e-03 5.33441445e-03 4.45012583e-03\n 2.21944945e-03 4.91576317e-03 4.92144426e-03 6.31811720e-05\n 1.84365648e-03 4.44676073e-03]", "rank_test_score": "[24 24  2  2  1  4 18 18 18 18 18 18  6  7  8 13 12 14 15 16  9 10 11 24\n  5 17]"}